{"version":3,"sources":["RTreeAdapter.js","Model/Region.js","Model/Point.js","Components/Canvas.js","Components/Tree.js","App.js","reportWebVitals.js","index.js"],"names":["Region","require","Point","region_hash","root","module","exports","id","parent_id","name","color","edges","AddSubRegion","Object","keys","length","parent_region_id","x","y","AddPoint","target_region_coord","GetRegionsBasedOnTargetRegion","IsLeaf","points","this","regions","region","push","target_bottom_left","target_top_right","bottom_left","top_right","x1","y1","x2","y2","x3","y3","x4","y4","c_region","result","i","IsPointInsideRegion","rectanglesOverlap","GetRegionRecursive","root_region","point","Rectangle","shapeProps","isSelected","onSelect","onChange","Getpoints","SetPoints","shapeRef","React","useRef","trRef","useEffect","current","nodes","getLayer","batchDraw","Fragment","opacity","onDblClick","onDblTap","ref","draggable","onClick","e","evt","button","pointerPosition","target","getStage","getPointerPosition","offset","parentid","pointId","prompt","json","slice","alert","onDragEnd","onTransformEnd","node","scaleX","scaleY","width","Math","max","height","boundBoxFunc","oldBox","newBox","Canvas","props","useState","selectedId","selectShape","TargetCoord","SetTargetCoord","checkDeselect","window","innerWidth","innerHeight","onMouseDown","onTouchStart","GetRectangles","map","rect","text","fill","IsDarkTheme","RTreeAdapter","newAttrs","rects","h","w","OnRectSizeChange","SetRectangles","dot","radius","shadowBlur","stroke","strokeWidth","dash","t0","performance","now","Search","t1","FoundPoints","splice","console","log","JSON","stringify","RegionHash","SetFoundPoints","SetMs","TreeVIew","data","children","nodeRadius","margins","top","bottom","left","right","animated","AddRootRegion","useGlobalState","createGlobalState","IsCanvasView","Rectangles","Points","ms","dialogClosed","Main","SetDarkTheme","Ms","DialogClosed","SetdialogClosed","className","style","Button","variant","floor","random","toString","NewRegion","parent","RegionExists","PointsCount","AddNewRect","Tree","Dialog","open","aria-labelledby","aria-describedby","DialogContentText","Badge","badgeContent","Box","component","display","p","m","DialogActions","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6bc01dee.chunk.js","sourcesContent":["//POINT MUST NOT BE MOVABLE...\n\nconst Region=require(\"./Model/Region.js\");\nconst Point=require(\"./Model/Point.js\");\n\n//Map Region ID to Region Object\nlet region_hash={}\n\n//root id\nlet root=null;\n\n//ramdom id , parent id,name of region,hexcode,an array of 4 elem\n//O(1)\nfunction NewRegion(id,parent_id,name,color,edges){\n    if(region_hash[id]!=null){\n        throw (\"Id is already taken\");\n    }\n    if(region_hash[parent_id]==null){\n        throw (\"The parent id \"+parent_id+\" Does not exists\");\n    }\n    region_hash[id]=new Region(id,parent_id,name,color,edges);\n    region_hash[parent_id].AddSubRegion(region_hash[id]);\n}\n\n// Add root region O(1)\nfunction AddRootRegion(){\n    root=new Region(1,null,\"root\",\"#ffffff\",[0,0,10000,10000]);\n    region_hash[1]=root;\n}\n\n//the edges is an array of 4 elem\n//O(e) where e is the elements in all the A,B,C,D\nfunction OnRectSizeChange(id,edges){\n    if(region_hash[id]==null){\n        throw (\"Id does not exists\");\n    }\n    region_hash[id].edges=edges;\n}\n\n//get number of elements in region_hash\n//O(k) where k are the key in the object\nfunction GetRegionCount(){\n    return Object.keys(region_hash).length;\n}\n\n//Add point to the corrosponding region\nfunction AddPoint(id,parent_region_id,name,x,y){\n    if(region_hash[parent_region_id]==null){\n        throw (\"Id does not exists\");\n    }\n    region_hash[parent_region_id].AddPoint(new Point(id,parent_region_id,name,x,y));\n}\n\n//the function takes target region start and end coord\nfunction Search(target_region_coord){\n    if(root!=null){\n        return root.GetRegionsBasedOnTargetRegion(root,target_region_coord);\n    }else{\n        return [];\n    }\n}\n\nfunction RegionHash(){\n    return region_hash;\n}\n\nfunction IsLeaf(id){\n    return region_hash[id].IsLeaf();\n}\n\nfunction PointsCount(id){\n    return region_hash[id].points.length;\n}\n\nfunction RegionExists(id){\n    if(region_hash[id]!=null){\n        return true;\n    }else{\n        return false;\n    }\n}\n\nmodule.exports={\n    \"NewRegion\":NewRegion,\n    \"AddRootRegion\":AddRootRegion,\n    \"OnRectSizeChange\":OnRectSizeChange,\n    \"GetRegionCount\":GetRegionCount,\n    \"AddPoint\":AddPoint,\n    \"Search\":Search,\n    \"RegionHash\":RegionHash,\n    \"IsLeaf\":IsLeaf,\n    \"PointsCount\":PointsCount,\n    \"RegionExists\":RegionExists\n}","class Region {\n\n    constructor(id,parent_id,name,color,edges) {\n      this.id=id;\n      this.parent_id=parent_id;\n      this.name=name;\n      this.points=[];\n      this.color=color;\n      //[0,1,2,3]\n      this.edges=edges;\n      this.regions=[];\n    }\n\n    // Add Sub Region ... based on the direction\n    AddSubRegion(region){\n      this.regions.push(region);\n    }\n\n\n    rectanglesOverlap(target_bottom_left,target_top_right,bottom_left,top_right) {\n      let x1=target_bottom_left[0];\n      let y1=target_bottom_left[1];\n      let x2=target_top_right[0];\n      let y2=target_top_right[1];\n\n      let x3=bottom_left[0];\n      let y3=bottom_left[1];\n      let x4=top_right[0];\n      let y4=top_right[1];\n\n      return (x1 < x4) && (x3 < x2) && (y1 < y4) && (y3 < y2);\n    }\n\n    IsPointInsideRegion(target_bottom_left,target_top_right,x,y){\n      let x1=target_bottom_left[0];\n      let x2=target_top_right[0];\n      let y1=target_bottom_left[1];\n      let y2=target_top_right[1];\n      if(x > x1 && x < x2 &&  y > y1 && y < y2){\n        return true;\n      }else{\n        return false;\n      }\n    }\n\n    //O(r.log(n)) where r is the region searched for each child region\n    GetRegionRecursive(target_bottom_left,target_top_right,c_region,result){\n      if(c_region.IsLeaf()){\n        for(var i=0;i<c_region.points.length;i++){\n          if(this.IsPointInsideRegion(target_bottom_left,target_top_right,c_region.points[i].x,c_region.points[i].y)){\n            result.push(c_region.points[i]);\n          }\n        }\n      }else{\n        for(var i=0;i<c_region.regions.length;i++){\n          let edges=c_region.regions[i].edges;\n          let bottom_left=[edges[0],edges[1]];\n          let top_right=[edges[2],edges[3]];\n          //check if target and current region overlap and target contains fully current region\n          //console.log(\"Is region \"+bottom_left+\" \"+top_right+\" Inside target \"+target_bottom_left+\" \"+target_top_right);\n          if(this.rectanglesOverlap(target_bottom_left,target_top_right,bottom_left,top_right)){\n            this.GetRegionRecursive(target_bottom_left,target_top_right,c_region.regions[i],result)\n          }\n        }\n      }\n    }\n    // returns array of region based on target region coordinates\n    GetRegionsBasedOnTargetRegion(root_region,target_region_coord){\n      var target_bottom_left=[target_region_coord[0],target_region_coord[1]];\n      var target_top_right=[target_region_coord[2],target_region_coord[3]];\n      var result=[];\n      this.GetRegionRecursive(target_bottom_left,target_top_right,root_region,result)\n      return result;\n    }\n\n    //returns boolean value based on points count\n    IsLeaf(){\n      if(this.regions.length==0){\n        return true;\n      }else{\n        return false;\n      }\n    }\n\n    //Add point to the region\n    AddPoint(point){\n      this.points.push(point);\n    }\n  }\n\n  module.exports=Region;","class Point {\n\n    constructor(id,parent_region_id,name,x,y) {\n      this.id=id;\n      this.parent_region_id=parent_region_id;\n      this.name=name;\n      this.x=x;\n      this.y=y;\n    }\n}\n\nmodule.exports=Point;\n","import React from 'react';\nimport reactDom from 'react-dom';\nimport { render } from 'react-dom';\nimport { Stage, Layer, Rect, Transformer ,Text,Circle} from 'react-konva';\n\nconst Rectangle = ({ shapeProps, isSelected, onSelect, onChange,AddPoint,Getpoints,SetPoints,IsLeaf}) => {\n  const shapeRef = React.useRef();\n  const trRef = React.useRef();\n\n  React.useEffect(() => {\n    if (isSelected) {\n      // we need to attach transformer manually\n      trRef.current.nodes([shapeRef.current]);\n      trRef.current.getLayer().batchDraw();\n    }\n  }, [isSelected]);\n\n  return (\n    <React.Fragment>\n      <Rect\n        opacity={0.4}\n        onDblClick={onSelect}\n        onDblTap={onSelect}\n        ref={shapeRef}\n        {...shapeProps}\n        draggable\n        onClick={\n            (e)=>{\n                if(e.evt.button===1){\n                    // Add the point \n                    const stage = e.target.getStage();\n                    const pointerPosition = stage.getPointerPosition();\n                    const offset = {x:pointerPosition.x, y: pointerPosition.y};\n                    const parentid=shapeProps.id;\n                    //(90,3,\"vase\",50,50);\n                    const pointId=prompt(\"Add the point name\");\n                    if(pointId===null || pointId===\"\"){\n                    }else{\n                        if(IsLeaf(parentid)){\n                            //Add the point in the UI\n                            let json=Getpoints.slice();\n                            json.push({\n                                x:offset.x,\n                                y:offset.y\n                            });\n                            AddPoint(pointId,parentid,pointId,offset.x,offset.y*-1);\n                            SetPoints(json);\n                        }else{\n                            alert(\"Cannot add points in Non leaf region \");\n                        }\n                    }\n                }\n            }\n        }\n        onDragEnd={(e) => {\n          onChange({\n            ...shapeProps,\n            x: e.target.x(),\n            y: e.target.y(),\n          });\n        }}\n        onTransformEnd={(e) => {\n          // transformer is changing scale of the node\n          // and NOT its width or height\n          // but in the store we have only width and height\n          // to match the data better we will reset scale on transform end\n          const node = shapeRef.current;\n          const scaleX = node.scaleX();\n          const scaleY = node.scaleY();\n\n          // we will reset it back\n          node.scaleX(1);\n          node.scaleY(1);\n          onChange({\n            ...shapeProps,\n            x: node.x(),\n            y: node.y(),\n            // set minimal value\n            width: Math.max(5, node.width() * scaleX),\n            height: Math.max(node.height() * scaleY),\n          });\n        }}\n      />\n      {isSelected && (\n        <Transformer\n          ref={trRef}\n          boundBoxFunc={(oldBox, newBox) => {\n            // limit resize\n            if (newBox.width < 5 || newBox.height < 5) {\n              return oldBox;\n            }\n            return newBox;\n          }}\n        />\n      )}\n    </React.Fragment>\n  );\n};\n\n\nconst Canvas = (props) => {\n  const [selectedId, selectShape] = React.useState(null);\n  const [TargetCoord, SetTargetCoord] = React.useState([20,50]);\n  const checkDeselect = (e) => {\n    // deselect when clicked on empty area\n    const clickedOnEmpty = e.target === e.target.getStage();\n    if (clickedOnEmpty) {\n      selectShape(null);\n    }\n  };\n\n  return (\n    <Stage\n      width={window.innerWidth}\n      height={window.innerHeight}\n      onMouseDown={checkDeselect}\n      onTouchStart={checkDeselect}\n    >\n      <Layer>\n        {props.GetRectangles.map((rect, i) => {\n          return (\n            <>\n            <Text text={rect.id} x={rect.x} y={rect.y}  fill={(props.IsDarkTheme)?\"white\":\"black\"}/>\n                <Rectangle\n                key={i}\n                shapeProps={rect}\n                AddPoint={props.RTreeAdapter.AddPoint}\n                IsLeaf={props.RTreeAdapter.IsLeaf}\n                Getpoints={props.Getpoints} \n                SetPoints={props.SetPoints} \n                isSelected={rect.id === selectedId}\n                onSelect={() => {\n                    selectShape(rect.id);\n                }}\n                onChange={(newAttrs) => {\n                    const rects = props.GetRectangles.slice();\n                    rects[i] = newAttrs;\n                    //change by id \n                    let x=newAttrs.x;\n                    let y=newAttrs.y;\n                    let h=newAttrs.height;\n                    let w=newAttrs.width;\n                    props.RTreeAdapter.OnRectSizeChange(rect.id,[x,-1*(y+h),x+w,y*-1]);\n                    props.SetRectangles(rects);\n                }}\n                />\n            </>\n          );\n        })}\n        {/*Point ID comes here */}\n        {props.Getpoints.map((dot, i) => {\n            return(\n                <Circle key={i} x={dot.x} y={dot.y} radius={3} fill=\"black\" shadowBlur={30} />\n            );\n        })}\n        <Text text=\"Target\" x={TargetCoord[0]} y={TargetCoord[1]}  fill={(props.IsDarkTheme)?\"white\":\"black\"}/>\n        <Rect\n          x={TargetCoord[0]}\n          y={TargetCoord[1]}\n          width={300}\n          height={300}\n          stroke='yellow'\n          strokeWidth={1}\n          dash={[1, 1]}\n          shadowBlur={10}\n          draggable\n          onDragEnd={(e) => {\n            //Find the points in the region [x,y+h,x+w,y]\n            var t0 = performance.now()\n            //[e.target.x(),(e.target.y()+100)*-1,e.target.x()+100,e.target.x()*-1]\n            let points=props.RTreeAdapter.Search([e.target.x(),(e.target.y()+300)*-1,e.target.x()+300,e.target.y()*-1]);\n            var t1 = performance.now()\n            //update in state (the array) FoundPoints\n            let json=props.FoundPoints.splice();\n            for(var i=0;i<points.length;i++){\n                json.push({\n                    parent_region_id:points[i].parent_region_id,\n                    name:points[i].name\n                });\n            }\n            console.log([e.target.x(),(e.target.y()+300)*-1,e.target.x()+300,e.target.y()*-1]);\n            console.log(JSON.stringify(props.RTreeAdapter.RegionHash()));\n            props.SetFoundPoints(json);\n            SetTargetCoord([e.target.x(),e.target.y()])\n            props.SetMs(t1-t0);\n          }}\n        />\n      </Layer>\n    </Stage>\n  );\n};\n\n\n\nexport default Canvas;","\nimport React from 'react';\nimport Tree from 'react-tree-graph';\nimport 'react-tree-graph/dist/style.css'\nimport \"../CustomTree.css\"\nconst TreeVIew = () => {\n  let data = {\n\tname: 'Parent',\n\tchildren: [{\n\t\tname: 'Child One',\n        children:[{\n            name:\"child3\"\n        }]\n\t}, {\n\t\tname: 'Child Two'\n\t}]\n};\n\n  return (\n    <Tree\n\tdata={data}\n    nodeRadius={15}\n    margins={{ top: 20, bottom: 10, left: 20, right: 200 }}\n\theight={700}\n\twidth={1000}\n\tanimated={true}/>\n  );\n}\n\nexport default TreeVIew;","import React from 'react';\nimport { createGlobalState } from 'react-hooks-global-state';\nimport Canvas from \"./Components/Canvas\";\nimport TreeView from \"./Components/Tree\";\nimport Dialog from '@material-ui/core/Dialog';\nimport Button from '@material-ui/core/Button';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport Box from '@material-ui/core/Box';\nimport Badge from '@material-ui/core/Badge';\nimport './App.css';\nconst RTreeAdapter=require(\"./RTreeAdapter\");\nRTreeAdapter.AddRootRegion();\nconst initialState = { \n  IsDarkTheme: true,\n  IsCanvasView:true,\n  Rectangles:[],\n  Points:[],\n  FoundPoints:[],\n  ms:0,\n  dialogClosed:false\n};\nconst { useGlobalState } = createGlobalState(initialState);\n\nconst Main = () => {\n  const [IsDarkTheme, SetDarkTheme] = useGlobalState('IsDarkTheme');\n  const [IsCanvasView, SetCanvasView] = useGlobalState('IsCanvasView');\n  const [GetRectangles, SetRectangles] = useGlobalState('Rectangles');\n  const [Getpoints, SetPoints] = useGlobalState('Points');\n  const [FoundPoints, SetFoundPoints] = useGlobalState('FoundPoints');\n  const [Ms, SetMs] = useGlobalState('ms');\n  const [DialogClosed, SetdialogClosed] = useGlobalState('dialogClosed');\n  const AddNewRect = () => {\n    let color= (Math.floor(Math.random()*0xffffff)|0x0f0f0f).toString(16);\n    const rects = GetRectangles.slice();\n    let name=prompt(\"Type in the region name \");\n    rects.push({\n      x: 0,\n      y: 0,\n      width: 100,\n      height: 100,\n      fill: \"#\"+color,\n      id: name\n    });\n    // Add by ID\n    //[x,y+h]\n    //let bottom_left=[0,100]\n    //[x+w,y]\n    //let top_right=[100,0]\n    if(name===\"\" || name===null){\n      alert(\"Invalid region name\");\n    }else{\n      if(GetRectangles.length===0){\n        RTreeAdapter.NewRegion(name,1,name,\"#\"+color,[0,-100,100,0]);\n        SetRectangles(rects);\n      }else{\n        //Add for the parent id\n        let parent=prompt(\"Type in parent region name \");\n        if(parent===\"\" || parent===null){\n          alert(\"Invalid Parent name\");\n        }else{\n          //Check if the parent exists\n          if(RTreeAdapter.RegionExists(parent)==true && RTreeAdapter.RegionExists(name)==false){\n            if(RTreeAdapter.PointsCount(parent)<1){\n              RTreeAdapter.NewRegion(name,parent,name,\"#\"+color,[0,-100,100,0]);\n              SetRectangles(rects);\n            }else{\n              alert(\"Region cannot be added on a region which already contains points\");\n            }\n          }else{\n            alert(\"No Such Region with the parent id exists or region id is already taken\");\n          }\n        }\n      }\n    }\n  }\n\n  return (\n    <div className=\"App\" style={{\"background-color\":(IsDarkTheme)?\"#282c34\":\"white\"}}>\n       <div className=\"App-header\">\n        <h2 style={{\"text-align\":\"center\",\"color\":(IsDarkTheme)?\"white\":\"black\"}} >R Tree</h2>\n        <p style={{\"font-size\":\"10px\",\"text-align\":\"center\",\"color\":(IsDarkTheme)?\"white\":\"black\"}}>{Ms} MS time taken</p>\n        {/*Options button*/}\n        <div style={{\"width\":\"100%\",\"display\":\"flex\",\"justify-content\": \"center\"}}>\n          {(IsCanvasView)?<div>&nbsp;<Button variant=\"outlined\" color=\"secondary\" onClick={()=>(AddNewRect())}>Add Region</Button>&nbsp;</div>:<div></div>}\n          <Button variant=\"outlined\" color=\"secondary\" onClick={()=>(SetdialogClosed(!DialogClosed))}>Show Points ({FoundPoints.length})</Button>&nbsp;\n          <Button variant=\"outlined\" color=\"secondary\" onClick={()=>(SetDarkTheme(!IsDarkTheme))}>{(IsDarkTheme)?\"Day Theme\":\"Night Theme\"}</Button>&nbsp;\n        </div>\n        {IsCanvasView?\n        <Canvas \n            GetRectangles={GetRectangles} \n            SetRectangles={SetRectangles} \n            SetFoundPoints={SetFoundPoints}\n            FoundPoints={FoundPoints}\n            Getpoints={Getpoints} \n            SetPoints={SetPoints} \n            IsDarkTheme={IsDarkTheme} \n            RTreeAdapter={RTreeAdapter}\n            SetMs={SetMs}\n        />:<TreeView/>}\n      </div>\n      <Dialog \n        open={DialogClosed}\n        aria-labelledby=\"alert-dialog-title\"\n        aria-describedby=\"alert-dialog-description\">\n        <DialogContentText >\n        <div style={{ width: '100%' }}>\n        {FoundPoints.map((point, i) => {\n          return (\n            <div>\n            &nbsp;&nbsp;&nbsp;<Badge badgeContent={\"\"} color=\"primary\"></Badge>\n            <Box component=\"div\" display=\"inline\" p={1} m={1} >\n              {point.name+\" In region \"+point.parent_region_id}\n            </Box><br/>\n          </div>\n          );\n        })}\n        </div>\n        </DialogContentText>\n        <DialogActions>\n          <Button  color=\"primary\" onClick={()=>(SetdialogClosed(!DialogClosed))}>\n            Done\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </div>\n  );\n};\n\nconst App = () => (\n    <Main />\n);\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}